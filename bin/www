const app = require('../app.js')
const http = require('http')
const debug = require('debug')

const normalizePort = (val) => {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		return val
	}

	if (port >= 0) {
		return port
	}

	return false
}

// HTTP server error even listener

const onError = (error) => {
	if (error.syscall !== 'listen') {
		throw error
	}

	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port

	// handle specific listen errors 
	switch (error.code) {
		case 'EACCES' :
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE' :
			console.error(bind + ' is already in user')
			process.exit(1)
			break
		default:
			throw error
	}
}

// HTTP server listen event
const onListening = () => {
	const addr = server.address()
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port
	debug('Listening on ' + bind)
}

const port = normalizePort(process.env.PORT || '3001')
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)